

%!target: html
%!options: --style style.css
%!encoding: iso-8859-1

%!postproc(html): '{([^}]*)}' '<\1>'

+ MII Interface (mii_interface) +

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
++ MII Interface - Overview ++
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This MII driver component is loosely based on the IEEE Draft P802.3u MII Management Interface standard.

++ Registers ++

||    Register     | Description                                                |
| Device Address   | Indicates de device HW address                             |
| Register Address | Indicates wich register of choiced device will be accessed |

++ MDIO Register Mapping ++

The MDIO register mapping is different for each MII device. But the behavior of the access is the same for all of them. The rising edge 
of **rst** pin loads the reset values into the registers. Registers are provided to allow individual control of each channel as an 
alternative to global control of all channels through the pins. All global control input pins must be at a valid state before the 
rising edge of **rst**. Registers are accessed through the serial management port. All the registers are addressable and are eight bits 
wide. All register values will be at a known state after the rising edge of **rst** and can only be changed by a write through the 
serial port. The reserve bits of the **mdio** registers do not carry any useful information for the customer.

++ MII Driver Usage ++

There are two types to use the driver, one to execute a write action and other to execute a read action. The access ways for these 
types of usage of the driver is showes bellow.

+++ Write Action +++

[figures/mii_write.png]

To send data the following steps should be made:

**Step 1**: Verifies that busy port isn't active (this indicates that driver is free);

**Step 2**: Write in device and register addresses in its respective ports;

**Step 3**: Write data in its respective port;

**Step 4**: Enable writen action by setting rw_operation to '1' and putting a high pulse in the mii_req port.


+++ Read Action +++

[figures/mii_read.png]

To receive data the following steps should be made:

**Step 1**: Verifies that busy port isn't active (this indicates that driver is free);

**Step 2**: Write in device and register addresses in its respective ports;

**Step 3**: Requires read action by setting rw_operation to '0' and putting a high pulse in the mii_req port.;

**Step 4**: Verifies that busy port isn't active (this indicates that driver is free);

**Step 5**: Read dout port (there is the data readed from MII device).


+ References +

**IEEE Draft P802.3u**

